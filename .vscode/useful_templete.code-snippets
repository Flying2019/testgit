{
	// Place your my_git 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	"my ST": {
        "prefix": "#st",
        "body": [
            "namespace ST{",
            "    int f[21][${1:N}*2],dep[${1:N}*2],id[${1:N}*2],tot;",
            "    int _2[${1:N}*2];",
            "    void dfs(int u,int p)",
            "    {",
            "        dep[u]=dep[p]+1;",
            "        f[0][++tot]=u;",
            "        id[u]=tot;",
            "        for(int i=head[u];i;i=nxt[i])",
            "        {",
            "            int v=to[i];",
            "            if(v==p) continue;",
            "            dfs(v,u);",
            "            f[0][++tot]=u;",
            "        }",
            "    }",
            "    int lca(int x,int y)",
            "    {",
            "        x=id[x],y=id[y];",
            "        if(x>y) swap(x,y);",
            "        int p=_2[y-x+1],u=1<<p;",
            "        return dep[f[p][x]]>dep[f[p][y-u+1]]?f[p][y-u+1]:f[p][x];",
            "    }",
            "    void init()",
            "    {",
            "        dfs(1,0);",
            "        for(int i=2;i<=tot;i++) _2[i]=_2[i>>1]+1;",
            "        for(int i=1,p=2;p<=tot;i++,p<<=1)",
            "            for(int j=1;j+p-1<=tot;j++)",
            "            if(dep[f[i-1][j]]<dep[f[i-1][j+p/2]]) f[i][j]=f[i-1][j];",
            "            else f[i][j]=f[i-1][j+p/2];",
            "    }",
            "}",
            "int dist(int x,int y){return ST::dep[x]+ST::dep[y]-2*ST::dep[ST::lca(x,y)];}"
        ],
        "description": "my ST"
    },
    "my min cost flow": {
        "prefix": "#flow",
        "body": [
            "typedef ${1:long long} typ;",
            "#define N ${2:30010}",
            "#define M ${3:100010}",
            "#define inf 1000000000",
            "#define winf ${4:10000000000000ll}",
            "struct road{",
            "    int nxt,to,f;",
            "    typ w;",
            "}r[M<<1];",
            "int head[N],cnt=1;",
            "void add(int u,int v,int f,typ w)",
            "{",
            "    r[++cnt]=(road){head[u],v,f,w};head[u]=cnt;",
            "    r[++cnt]=(road){head[v],u,0,-w};head[v]=cnt;",
            "}",
            "namespace min_cost_flow{",
            "    int cur[N],all;",
            "    bool vis[N];",
            "    struct node{",
            "        int u;typ v;",
            "        node(int U=0,typ V=0):u(U),v(V){}",
            "        bool operator <(const node a)const{return v>a.v;}",
            "    };",
            "    priority_queue<node>q;",
            "    typ dis[N],tag[N];",
            "    bool dij(int s,int t)",
            "    {",
            "        for(int i=1;i<=all;i++) dis[i]=winf,cur[i]=head[i];",
            "        dis[t]=0;q.push(node(t,0));",
            "        while(!q.empty())",
            "        {",
            "            int u=q.top().u;q.pop();",
            "            if(vis[u]) continue;",
            "            vis[u]=true;",
            "            for(int i=head[u];i;i=r[i].nxt)",
            "            {",
            "                int v=r[i].to,w=tag[u]+r[i^1].w-tag[v];",
            "                if(r[i^1].f && dis[u]+w<dis[v]) dis[v]=dis[u]+w,q.push(node(v,dis[v]));",
            "            }",
            "        }",
            "        for(int i=1;i<=all;i++) tag[i]=min(tag[i]+dis[i],winf);",
            "        if(!vis[s]) return false;",
            "        for(int i=1;i<=all;i++) vis[i]=false;",
            "        return true;",
            "    }",
            "    int dfs(int u,int t,int fl)",
            "    {",
            "        if(u==t || !fl) return fl;",
            "        int res=0;",
            "        vis[u]=true;",
            "        for(int &i=cur[u];i;i=r[i].nxt)",
            "        if(r[i].f)",
            "        {",
            "            int v=r[i].to,f;",
            "            if(!vis[v] && tag[v]+r[i].w==tag[u] && (f=dfs(v,t,min(fl,r[i].f))))",
            "            {",
            "                r[i].f-=f,r[i^1].f+=f;",
            "                res+=f,fl-=f;",
            "                if(!fl) break;",
            "            }",
            "        }",
            "        vis[u]=false;",
            "        return res;",
            "    }",
            "    int maxf;typ minw;",
            "    void work(int s,int t){while(dij(s,t)){int w=dfs(s,t,inf);maxf+=w,minw+=w*tag[s];}}",
            "}$0"
        ]
    }
}